================================================================================
HABIT TRACKER API - ETAPA 0: SETUP MEDIU DEZVOLTARE
================================================================================

PROIECT: django-habit-tracker-api
AUTOR: Vasili Braila
EMAIL: vbraila@gmail.com
GITHUB: BrailaVasilii/django-habit-tracker-api
PYTHON: 3.12
ABORDARE: TDD (Test-Driven Development)

================================================================================
PREREQUISITE (FĂCUT MANUAL - VERIFICARE)
================================================================================
✅ Database habit_tracker_db creat în containerul postgres-drf
✅ User habit_admin creat cu parolă SecureHabit2025!
✅ Permissions și ownership configurate

VERIFICARE RAPIDĂ (rulează tu manual dacă vrei să confirmi):
sudo docker exec -it postgres-drf psql -U postgres -c "\l" | grep habit_tracker_db

Ar trebui să vezi habit_tracker_db cu owner habit_admin.

================================================================================
STARE ACTUALĂ PROIECT
================================================================================
✅ Proiect Poetry creat
✅ Git ignore configurat
✅ Virtual environment Poetry disponibil
✅ Container PostgreSQL (postgres-drf) rulează
✅ Database habit_tracker_db creat manual
❌ Dependințe Django/DRF nu sunt instalate
❌ Proiect Django nu există
❌ Aplicații users/habits nu există
❌ Fișiere config (.env, pytest.ini) nu există

================================================================================
OBIECTIVE ETAPA 0
================================================================================
✓ Instalare toate dependințele necesare prin Poetry
✓ Creare proiect Django cu structură config
✓ Creare aplicații users și habits
✓ Setup directoare pentru teste
✓ Configurare .env cu date reale
✓ Configurare settings.py complet
✓ Configurare pytest și coverage
✓ Verificare conexiune la database
✓ Verificare finală că totul funcționează

================================================================================
SECȚIUNEA 1: INSTALARE DEPENDINȚE PRINCIPALE
================================================================================

Rulează comenzile următoare (Poetry shell trebuie să fie activ):

poetry add django
poetry add djangorestframework
poetry add djangorestframework-simplejwt
poetry add django-cors-headers
poetry add celery
poetry add redis
poetry add requests
poetry add python-dotenv
poetry add psycopg2-binary
poetry add drf-yasg

NOTĂ: Instalarea durează 2-3 minute. Așteaptă finalizarea completă.

================================================================================
SECȚIUNEA 2: INSTALARE DEPENDINȚE DEVELOPMENT
================================================================================

poetry add --group dev pytest
poetry add --group dev pytest-django
poetry add --group dev pytest-cov
poetry add --group dev flake8
poetry add --group dev faker

================================================================================
SECȚIUNEA 3: VERIFICARE INSTALARE
================================================================================

Verifică că toate pachetele s-au instalat:

poetry show

Ar trebui să vezi lista completă cu django, djangorestframework, celery, etc.

================================================================================
SECȚIUNEA 4: CREARE PROIECT DJANGO
================================================================================

Creează proiectul Django cu structura config:

django-admin startproject config .

IMPORTANT: Nu uita punctul (.) la final!

Verificare:

ls -la

Ar trebui să vezi:
- manage.py (fișier nou)
- config/ (director nou)
- pyproject.toml (existent)
- poetry.lock (existent)

================================================================================
SECȚIUNEA 5: CREARE APLICAȚII DJANGO
================================================================================

python manage.py startapp users
python manage.py startapp habits

Verificare:

ls -la

Acum ar trebui să ai directoarele: config/, users/, habits/

================================================================================
SECȚIUNEA 6: CREARE DIRECTOARE PENTRU TESTE
================================================================================

mkdir -p users/tests
mkdir -p habits/tests
touch users/tests/__init__.py
touch habits/tests/__init__.py

Verificare:

ls users/tests/
ls habits/tests/

Ar trebui să vezi fișierul __init__.py în ambele directoare.

================================================================================
SECȚIUNEA 7: CREARE FIȘIER .env
================================================================================

Creează fișierul .env în root (django-habit-tracker-api/) cu următorul conținut:

SECRET_KEY=django-insecure-k7m#9p@x$w2n&f5h*j8q!r3t6v9y$b&e(h+k@m?p[s
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

DB_ENGINE=django.db.backends.postgresql
DB_NAME=habit_tracker_db
DB_USER=habit_admin
DB_PASSWORD=SecureHabit2025!
DB_HOST=localhost
DB_PORT=5432

CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

TELEGRAM_BOT_TOKEN=8037381764:AAGTIgtLdqiunsb_0xDvNEaPTIK8gb1SQJk

NOTĂ: Salvează fișierul cu encoding UTF-8.

================================================================================
SECȚIUNEA 8: CREARE FIȘIER .env.example
================================================================================

Creează fișierul .env.example (template fără date sensibile):

SECRET_KEY=
DEBUG=True
ALLOWED_HOSTS=

DB_ENGINE=django.db.backends.postgresql
DB_NAME=
DB_USER=
DB_PASSWORD=
DB_HOST=
DB_PORT=

CELERY_BROKER_URL=
CELERY_RESULT_BACKEND=

TELEGRAM_BOT_TOKEN=

================================================================================
SECȚIUNEA 9: CREARE pytest.ini
================================================================================

Creează fișierul pytest.ini în root:

[pytest]
DJANGO_SETTINGS_MODULE = config.settings
python_files = tests.py test_*.py *_tests.py
addopts = --cov=. --cov-report=html --cov-report=term-missing --cov-config=.coveragerc
testpaths = users/tests habits/tests

================================================================================
SECȚIUNEA 10: CREARE .coveragerc
================================================================================

Creează fișierul .coveragerc în root:

[run]
omit =
    */migrations/*
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */config/asgi.py
    */config/wsgi.py
    manage.py

[report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:

================================================================================
SECȚIUNEA 11: CONFIGURARE config/settings.py
================================================================================

Deschide fișierul config/settings.py și ÎNLOCUIEȘTE COMPLET CONȚINUTUL cu:

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG', 'False') == 'True'
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_yasg',

    'users',
    'habits',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND')
CELERY_TIMEZONE = 'UTC'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

================================================================================
SECȚIUNEA 12: VERIFICARE DJANGO CHECK
================================================================================

Rulează comanda de verificare Django:

python manage.py check

AȘTEPTAT: Vei vedea erori legate de AUTH_USER_MODEL (users.User nu există încă)

Exemple de erori normale la acest moment:
- auth.User has been swapped for 'users.User' which has not been installed
- ERRORS: auth.User has been swapped...

Aceste erori sunt NORMALE și AȘTEPTATE. Le vom rezolva în ETAPA 1 când vom crea modelul User.

Dacă vezi alte tipuri de erori (ImportError, ModuleNotFoundError pentru dotenv, etc), verifică instalarea dependințelor.

================================================================================
SECȚIUNEA 13: TEST CONEXIUNE DATABASE
================================================================================

Testează conexiunea la PostgreSQL:

python manage.py dbshell

Dacă intri în prompt-ul psql (habit_tracker_db=>), conexiunea funcționează perfect!

Pentru ieșire din psql:

\q

Dacă primești eroare de conexiune:
1. Verifică că containerul postgres-drf rulează: docker ps | grep postgres
2. Verifică credențialele în .env (DB_NAME, DB_USER, DB_PASSWORD)
3. Verifică că database-ul există: sudo docker exec -it postgres-drf psql -U postgres -c "\l"

================================================================================
SECȚIUNEA 14: STRUCTURA FINALĂ PROIECT
================================================================================

Verifică structura completă a proiectului:

ls -R

SAU

find . -type f -name "*.py" | head -20

Structură așteptată:

django-habit-tracker-api/
├── .env
├── .env.example
├── .gitignore
├── pytest.ini
├── .coveragerc
├── poetry.lock
├── pyproject.toml
├── README.md
├── manage.py
├── config/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── asgi.py
│   └── wsgi.py
├── users/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── views.py
│   └── tests/
│       └── __init__.py
└── habits/
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── models.py
    ├── views.py
    └── tests/
        └── __init__.py

================================================================================
SECȚIUNEA 15: VERIFICARE DEPENDINȚE INSTALATE
================================================================================

Verifică lista completă de pachete instalate:

poetry show

Ar trebui să vezi:
- django
- djangorestframework
- djangorestframework-simplejwt
- django-cors-headers
- celery
- redis
- requests
- python-dotenv
- psycopg2-binary
- drf-yasg
- pytest
- pytest-django
- pytest-cov
- flake8
- faker

================================================================================
STATUS ETAPA 0 - VERIFICARE FINALĂ
================================================================================

✅ ETAPA 0 COMPLETĂ dacă toate acestea sunt îndeplinite:

□ poetry show arată toate dependințele (minimum 15 pachete)
□ Proiect Django creat (manage.py și config/ există)
□ Aplicații users și habits create
□ Directoare tests/ create în users/ și habits/
□ Fișier .env creat cu toate variabilele
□ Fișier .env.example creat
□ Fișiere pytest.ini și .coveragerc create
□ config/settings.py configurat complet cu toate imports
□ python manage.py dbshell funcționează (conexiune DB OK)
□ python manage.py check arată doar erori AUTH_USER_MODEL (normal)

❌ PROBLEME COMUNE ȘI SOLUȚII:

PROBLEMĂ: ModuleNotFoundError: No module named 'dotenv'
SOLUȚIE: poetry add python-dotenv

PROBLEMĂ: ModuleNotFoundError: No module named 'rest_framework'
SOLUȚIE: Verifică că Poetry shell este activ, apoi poetry install

PROBLEMĂ: psycopg2.OperationalError: connection refused
SOLUȚIE: Verifică că postgres-drf rulează cu docker ps

PROBLEMĂ: psycopg2.OperationalError: password authentication failed
SOLUȚIE: Verifică DB_USER și DB_PASSWORD în .env

PROBLEMĂ: django.core.exceptions.ImproperlyConfigured: Requested setting INSTALLED_APPS
SOLUȚIE: Verifică că DJANGO_SETTINGS_MODULE este setat sau rulezi din directorul cu manage.py

================================================================================
URMĂTOAREA ETAPĂ
================================================================================

După finalizarea cu succes a ETAPA 0, vei continua cu:

ETAPA 1: User Model + Authentication (JWT) - Abordare TDD

În ETAPA 1 vom crea:
1. Tests pentru User model (RED PHASE)
2. Custom User model cu telegram_chat_id (GREEN PHASE)
3. Migrations pentru User model
4. Serializers pentru User
5. Views pentru register și login
6. URLs pentru authentication
7. Tests pentru authentication endpoints
8. Verificare coverage teste

NOTĂ IMPORTANTĂ: Eroarea AUTH_USER_MODEL din python manage.py check este NORMALĂ și AȘTEPTATĂ. Ea va dispărea complet după ce vom crea modelul User în ETAPA 1.

Această eroare NU împiedică continuarea dezvoltării și NU afectează funcționarea database-ului sau a setup-ului general.

================================================================================
NOTIȚE FINALE
================================================================================

- Database habit_tracker_db este COMPLET SEPARAT de alte database-uri (drf_db, test_drf_db)
- Containerul postgres-drf este PARTAJAT dar database-urile sunt IZOLATE
- Poetry virtual environment este IZOLAT pentru acest proiect
- .env conține date REALE și este în .gitignore
- .env.example este TEMPLATE-ul pentru alți dezvoltatori

Toate dependințele sunt instalate LOCAL în virtual environment-ul Poetry, nu global pe sistem.

================================================================================